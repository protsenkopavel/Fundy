package net.protsenko.fundy.notifier.bot;

import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import net.protsenko.fundy.app.dto.FundingRateData;
import net.protsenko.fundy.notifier.service.FundingAggregatorService;
import net.protsenko.fundy.notifier.service.FundingSnapshotCache;
import net.protsenko.fundy.notifier.util.FundingMessageFormatter;
import org.springframework.beans.factory.annotation.Value;
import net.protsenko.fundy.app.exchange.ExchangeType;
import net.protsenko.fundy.notifier.dto.FundingAlertSettings;
import net.protsenko.fundy.notifier.repo.UserSettingsRepo;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.Duration;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.Executor;
import java.util.stream.Collectors;

@Component
@Slf4j
public class FundingBot extends TelegramLongPollingBot {

    private final String username;
    private final String token;
    private final UserSettingsRepo repo;
    private final BotStateStore stateStore;
    private final FundingSnapshotCache cache;
    private final Executor previewExecutor;

    public FundingBot(
            @Value("${telegram.bot.username}") String username,
            @Value("${telegram.bot.token}") String token,
            UserSettingsRepo repo,
            BotStateStore stateStore,
            FundingSnapshotCache cache,
            Executor previewExecutor
    ) {
        this.username = username;
        this.token = token;
        this.repo = repo;
        this.stateStore = stateStore;
        this.cache = cache;
        this.previewExecutor = previewExecutor;
    }

    @PostConstruct
    void init() {
        log.info("FundingBot init: username={}, tokenPresent={}", username, token != null && !token.isBlank());
    }

    @PostConstruct
    void registerCommands() {
        var commands = List.of(
                new BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
                new BotCommand("menu", "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"),
                new BotCommand("top", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø —Ñ–∞–Ω–¥–∏–Ω–≥–æ–≤ —Å–µ–π—á–∞—Å"),
                new BotCommand("min", "–ú–∏–Ω. —Å—Ç–∞–≤–∫–∞ (%)"),
                new BotCommand("before", "–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"),
                new BotCommand("tz", "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å"),
                new BotCommand("exchanges", "–í—ã–±–æ—Ä –±–∏—Ä–∂"),
                new BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞"),
                new BotCommand("stop", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
                new BotCommand("ping", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏")
        );
        try {
            execute(new SetMyCommands(commands, new BotCommandScopeDefault(), null));
        } catch (Exception e) {
            log.warn("SetMyCommands failed", e);
        }
    }

    @Override public String getBotUsername() { return username; }
    @Override public String getBotToken()    { return token; }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasCallbackQuery()) {
                handleCallback(update);
            } else if (update.hasMessage() && update.getMessage().hasText()) {
                handleText(update);
            }
        } catch (Exception e) {
            log.error("Update handling error", e);
        }
    }

    // ---------- TEXT ----------
    private void handleText(Update upd) {
        long chatId = upd.getMessage().getChatId();
        String text = upd.getMessage().getText().trim();
        String[] parts = text.split("\\s+", 2);
        String cmd = parts[0].toLowerCase(Locale.ROOT);
        String args = parts.length > 1 ? parts[1].trim() : "";

        // –õ—é–±–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (text.startsWith("/")) {
            stateStore.set(chatId, BotState.NONE);
        }

        BotState st = stateStore.get(chatId);
        if (st != BotState.NONE && !text.startsWith("/")) {
            processWaitingState(chatId, text, st);
            return;
        }

        switch (cmd) {
            case "/start" -> {
                repo.save(repo.getOrDefault(chatId));
                send(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ñ–∞–Ω–¥–∏–Ω–≥–∏. –ù–∞–∂–º–∏ /menu", null);
            }
            case "/menu"     -> sendMenuNew(chatId);
            case "/top"      -> previewAsync(chatId); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ‚è≥ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç
            case "/min"      -> handleSlashMin(chatId, args);
            case "/before"   -> handleSlashBefore(chatId, args);
            case "/tz"       -> handleSlashTz(chatId, args);
            case "/exchanges"-> showExchangeToggles(chatId, null);
            case "/help"     -> send(chatId, helpText(), null);
            case "/stop"     -> send(chatId, "–û–∫, –Ω–µ –±—É–¥—É —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. (/start —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å)", null);
            case "/ping"     -> send(chatId, "pong", null);
            default          -> send(chatId, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π /help", null);
        }
    }

    private void handleSlashMin(long chatId, String args) {
        if (args.isBlank()) {
            send(chatId, "–ü—Ä–∏–º–µ—Ä: /min 0.5", null);
            return;
        }
        try {
            BigDecimal p = new BigDecimal(args).divide(BigDecimal.valueOf(100));
            var old = repo.getOrDefault(chatId);
            repo.save(new FundingAlertSettings(chatId, p, old.exchanges(), old.notifyBefore(), old.zone()));
            send(chatId, "–ú–∏–Ω. —Å—Ç–∞–≤–∫–∞: " + p.multiply(BigDecimal.valueOf(100)) + "%", null);
        } catch (Exception e) {
            send(chatId, "–ù–µ –ø–æ–Ω—è–ª —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: /min 0.5", null);
        }
    }

    private void handleSlashBefore(long chatId, String args) {
        if (args.isBlank()) {
            send(chatId, "–ü—Ä–∏–º–µ—Ä: /before 30m –∏–ª–∏ /before 1h", null);
            return;
        }
        try {
            Duration d = parseDuration(args);
            var old = repo.getOrDefault(chatId);
            repo.save(new FundingAlertSettings(chatId, old.minAbsRate(), old.exchanges(), d, old.zone()));
            send(chatId, "–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ: " + FundingMessageFormatter.prettyDuration(d), null);
        } catch (Exception e) {
            send(chatId, "–ù–µ –ø–æ–Ω—è–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ü—Ä–∏–º–µ—Ä: /before 30m", null);
        }
    }

    private void handleSlashTz(long chatId, String args) {
        if (args.isBlank()) {
            send(chatId, "–ü—Ä–∏–º–µ—Ä: /tz Europe/Moscow", null);
            return;
        }
        try {
            ZoneId z = ZoneId.of(args);
            var old = repo.getOrDefault(chatId);
            repo.save(new FundingAlertSettings(chatId, old.minAbsRate(), old.exchanges(), old.notifyBefore(), z));
            send(chatId, "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: " + z, null);
        } catch (Exception e) {
            send(chatId, "–ù–µ –ø–æ–Ω—è–ª TZ. –ü—Ä–∏–º–µ—Ä: /tz Europe/Moscow", null);
        }
    }

    private String helpText() {
        return """
            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            /menu ‚Äî –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            /top ‚Äî —Ç–æ–ø —Ñ–∞–Ω–¥–∏–Ω–≥–æ–≤ —Å–µ–π—á–∞—Å
            /min <pct> ‚Äî –º–∏–Ω. —Å—Ç–∞–≤–∫–∞, % (–Ω–∞–ø—Ä–∏–º–µ—Ä /min 0.7)
            /before <30m|1h> ‚Äî –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
            /tz <ZoneId> ‚Äî —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (Europe/Moscow)
            /exchanges ‚Äî –≤—ã–±—Ä–∞—Ç—å –±–∏—Ä–∂–∏
            /stop ‚Äî –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            """;
    }

    private InlineKeyboardMarkup previewKb() {
        return new InlineKeyboardMarkup(List.of(
                List.of(btn("üìã –ú–µ–Ω—é", "BACK_MENU"), btn("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "PREVIEW"))
        ));
    }

    private void processWaitingState(long chatId, String text, BotState st) {
        FundingAlertSettings old = repo.getOrDefault(chatId);
        try {
            switch (st) {
                case WAIT_MIN -> {
                    BigDecimal p = new BigDecimal(text).divide(BigDecimal.valueOf(100));
                    repo.save(new FundingAlertSettings(chatId, p, old.exchanges(), old.notifyBefore(), old.zone()));
                    stateStore.set(chatId, BotState.NONE);
                    send(chatId, "–ú–∏–Ω. —Å—Ç–∞–≤–∫–∞: " + p.multiply(BigDecimal.valueOf(100)) + "%", null);
                    sendMenuNew(chatId);
                }
                case WAIT_BEFORE -> {
                    Duration d = parseDuration(text);
                    repo.save(new FundingAlertSettings(chatId, old.minAbsRate(), old.exchanges(), d, old.zone()));
                    stateStore.set(chatId, BotState.NONE);
                    send(chatId, "–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ: " + FundingMessageFormatter.prettyDuration(d), null);
                    sendMenuNew(chatId);
                }
                case WAIT_TZ -> {
                    ZoneId z = ZoneId.of(text);
                    repo.save(new FundingAlertSettings(chatId, old.minAbsRate(), old.exchanges(), old.notifyBefore(), z));
                    stateStore.set(chatId, BotState.NONE);
                    send(chatId, "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: " + z, null);
                    sendMenuNew(chatId);
                }
            }
        } catch (Exception e) {
            send(chatId, "–ù–µ –ø–æ–Ω—è–ª –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", null);
        }
    }

    // ---------- CALLBACK ----------
    private void handleCallback(Update upd) throws Exception {
        var cb = upd.getCallbackQuery();
        long chatId = cb.getMessage().getChatId();
        Integer msgId = cb.getMessage().getMessageId();
        String data = cb.getData();

        execute(AnswerCallbackQuery.builder().callbackQueryId(cb.getId()).build());

        if ("BACK_MENU".equals(data)) {
            editMenu(chatId, msgId);
            return;
        }

        switch (data) {
            case "SET_MIN" -> {
                stateStore.set(chatId, BotState.WAIT_MIN);
                edit(chatId, msgId, "–í–≤–µ–¥–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É –≤ %, –Ω–∞–ø—Ä–∏–º–µ—Ä 0.5", null);
            }
            case "SET_EXCH" -> showExchangeToggles(chatId, msgId);
            case "SET_BEFORE" -> {
                stateStore.set(chatId, BotState.WAIT_BEFORE);
                edit(chatId, msgId, "–í–≤–µ–¥–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä 30m –∏–ª–∏ 1h", null);
            }
            case "SET_TZ" -> {
                stateStore.set(chatId, BotState.WAIT_TZ);
                edit(chatId, msgId, "–í–≤–µ–¥–∏ tz, –Ω–∞–ø—Ä–∏–º–µ—Ä Europe/Moscow", null);
            }
            case "PREVIEW" -> previewAsync(chatId); // –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            default -> {
                if (data.startsWith("EX_")) {
                    toggleExchange(chatId, data.substring(3));
                    showExchangeToggles(chatId, msgId);
                }
            }
        }
    }

    // ---------- PREVIEW ----------
    private void previewAsync(long chatId) {
        Message pending;
        try {
            pending = execute(SendMessage.builder()
                    .chatId(String.valueOf(chatId))
                    .text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–ø-—Ñ–∞–Ω–¥–∏–Ω–≥–∏‚Ä¶")
                    .parseMode("HTML")
                    .disableWebPagePreview(true)
                    .replyMarkup(previewKb())
                    .build());
        } catch (Exception e) {
            log.warn("Cannot send pending msg", e);
            return;
        }

        int msgId = pending.getMessageId();

        previewExecutor.execute(() -> {
            try {
                String txt = buildPreviewText(chatId);
                edit(chatId, msgId, txt, previewKb());
            } catch (Exception e) {
                log.error("preview failed", e);
                edit(chatId, msgId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", previewKb());
            }
        });
    }

    private String buildPreviewText(long chatId) {
        var s = repo.getOrDefault(chatId);

        Map<ExchangeType, List<FundingRateData>> snap = cache.getLastSnapshot();
        if (snap.isEmpty() || cache.isStale()) {
            snap = cache.forceRefresh(Duration.ofSeconds(5));
        }
        if (snap.isEmpty()) {
            return "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è, –æ–±–Ω–æ–≤–∏ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω.";
        }

        var list = snap.entrySet().stream()
                .filter(e -> s.exchanges().isEmpty() || s.exchanges().contains(e.getKey()))
                .flatMap(e -> e.getValue().stream().map(fr -> Map.entry(e.getKey(), fr)))
                .filter(e -> e.getValue().fundingRate().abs().compareTo(s.minAbsRate()) >= 0)
                .sorted(Comparator.comparing(
                        (Map.Entry<ExchangeType, FundingRateData> e) -> e.getValue().fundingRate().abs()
                ).reversed())
                .limit(10)
                .toList();

        ZonedDateTime upd = cache.getLastUpdated().atZone(s.zone());

        String header = "–¢–µ–∫—É—â–∏–µ —Ñ–∞–Ω–¥–∏–Ω–≥–∏ > %s%%\n\n"
                .formatted(
                        s.minAbsRate().multiply(BigDecimal.valueOf(100))
                                .setScale(2, RoundingMode.HALF_UP)
                                .stripTrailingZeros().toPlainString()
                );

        if (list.isEmpty()) {
            return header + "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–∞–≤–æ–∫.";
        }

        StringBuilder sb = new StringBuilder(header);
        for (var e : list) {
            sb.append(FundingMessageFormatter.format(e.getValue(), e.getKey(), s.zone()))
                    .append("\n");
        }
        return sb.toString().trim();
    }

    // ---------- MENU / UI ----------
    private void sendMenuNew(long chatId) {
        FundingAlertSettings s = repo.getOrDefault(chatId);
        send(chatId, menuText(s), menuKb());
    }

    private void editMenu(long chatId, Integer msgId) {
        FundingAlertSettings s = repo.getOrDefault(chatId);
        edit(chatId, msgId, menuText(s), menuKb());
    }

    private String menuText(FundingAlertSettings s) {
        return """
                ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
                ‚Ä¢ –ú–∏–Ω. —Å—Ç–∞–≤–∫–∞: %s%%
                ‚Ä¢ –ë–∏—Ä–∂–∏: %s
                ‚Ä¢ –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ: %s
                ‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: %s
                """.formatted(
                s.minAbsRate().multiply(BigDecimal.valueOf(100)),
                s.exchanges().isEmpty() ? "–í–°–ï" : s.exchanges(),
                FundingMessageFormatter.prettyDuration(s.notifyBefore()),
                s.zone()
        );
    }

    private InlineKeyboardMarkup menuKb() {
        return new InlineKeyboardMarkup(List.of(
                List.of(btn("üìâ –ú–∏–Ω. %", "SET_MIN")),
                List.of(btn("üè¶ –ë–∏—Ä–∂–∏", "SET_EXCH")),
                List.of(btn("‚è∞ –ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ", "SET_BEFORE")),
                List.of(btn("üåç Timezone", "SET_TZ")),
                List.of(btn("üëÄ –¢–æ–ø —Å–µ–π—á–∞—Å", "PREVIEW"))
        ));
    }

    private void showExchangeToggles(long chatId, Integer msgId) {
        FundingAlertSettings s = repo.getOrDefault(chatId);
        Set<ExchangeType> set = s.exchanges();

        List<List<InlineKeyboardButton>> rows = Arrays.stream(ExchangeType.values())
                .map(ex -> {
                    boolean on = set.isEmpty() || set.contains(ex);
                    return List.of(btn((on ? "‚úÖ " : "‚ùå ") + ex.name(), "EX_" + ex.name()));
                })
                .toList();

        rows.add(List.of(btn("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "BACK_MENU")));
        InlineKeyboardMarkup kb = new InlineKeyboardMarkup(rows);

        edit(chatId, msgId, "–ë–∏—Ä–∂–∏ (–Ω–∞–∂–∏–º–∞–π, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å):", kb);
    }

    private void toggleExchange(long chatId, String exStr) {
        ExchangeType ex = ExchangeType.valueOf(exStr);
        FundingAlertSettings old = repo.getOrDefault(chatId);
        Set<ExchangeType> set = new HashSet<>(old.exchanges());
        if (set.isEmpty()) { // –±—ã–ª–æ "–í–°–ï"
            set.addAll(Arrays.asList(ExchangeType.values()));
        }
        if (!set.add(ex)) set.remove(ex);
        repo.save(new FundingAlertSettings(chatId, old.minAbsRate(), set, old.notifyBefore(), old.zone()));
    }

    // ---------- utils ----------
    private InlineKeyboardButton btn(String text, String data) {
        InlineKeyboardButton b = new InlineKeyboardButton();
        b.setText(text);
        b.setCallbackData(data);
        return b;
    }

    private void send(long chatId, String text, InlineKeyboardMarkup kb) {
        try {
            execute(SendMessage.builder()
                    .chatId(String.valueOf(chatId))
                    .text(text)
                    .parseMode("HTML")
                    .disableWebPagePreview(true)
                    .replyMarkup(kb)
                    .build());
        } catch (Exception e) {
            log.warn("Send failed", e);
        }
    }

    private void edit(long chatId, Integer msgId, String text, InlineKeyboardMarkup kb) {
        try {
            EditMessageText em = new EditMessageText();
            em.setChatId(String.valueOf(chatId));
            em.setMessageId(msgId);
            em.setText(text);
            em.setParseMode("HTML");
            em.setDisableWebPagePreview(true);
            if (kb != null) em.setReplyMarkup(kb);
            execute(em);
        } catch (Exception e) {
            log.warn("Edit failed", e);
        }
    }

    private Duration parseDuration(String s) {
        s = s.toLowerCase(Locale.ROOT).trim();
        long hours = 0, minutes = 0;
        int idxH = s.indexOf('h');
        if (idxH >= 0) {
            hours = Long.parseLong(s.substring(0, idxH));
            s = s.substring(idxH + 1);
        }
        int idxM = s.indexOf('m');
        if (idxM >= 0 && !s.isBlank()) {
            minutes = Long.parseLong(s.substring(0, idxM));
        }
        if (hours == 0 && minutes == 0) {
            return Duration.parse("PT" + s.toUpperCase()); // PT30M
        }
        return Duration.ofHours(hours).plusMinutes(minutes);
    }
}